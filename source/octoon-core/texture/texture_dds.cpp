#include "texture_dds.h"

#include <algorithm>
#include <cstring>
#include <cstdlib>

namespace octoon
{
	typedef int             dds_int;
	typedef unsigned int    dds_uint;
	typedef char            dds_byte;
	typedef unsigned char   dds_ubyte;
	typedef long            dds_long;
	typedef unsigned long   dds_ulong;
	typedef void            dds_void;
	typedef void*           dds_ptr;

	#define DDS_MAKE_FOURCC(ch0, ch1, ch2, ch3) \
			((dds_uint)( \
			(((dds_uint)(dds_ubyte)(ch3) << 24) & 0xFF000000) | \
			(((dds_uint)(dds_ubyte)(ch2) << 16) & 0x00FF0000) | \
			(((dds_uint)(dds_ubyte)(ch1) <<  8) & 0x0000FF00) | \
				((dds_uint)(dds_ubyte)(ch0)        & 0x000000FF) ))

	enum D3DFORMAT
	{
		D3DFMT_UNKNOWN = 0,

		D3DFMT_R8G8B8 = 20,
		D3DFMT_A8R8G8B8 = 21,
		D3DFMT_X8R8G8B8 = 22,
		D3DFMT_R5G6B5 = 23,
		D3DFMT_X1R5G5B5 = 24,
		D3DFMT_A1R5G5B5 = 25,
		D3DFMT_A4R4G4B4 = 26,
		D3DFMT_R3G3B2 = 27,
		D3DFMT_A8 = 28,
		D3DFMT_A8R3G3B2 = 29,
		D3DFMT_X4R4G4B4 = 30,
		D3DFMT_A2B10G10R10 = 31,
		D3DFMT_A8B8G8R8 = 32,
		D3DFMT_X8B8G8R8 = 33,
		D3DFMT_G16R16 = 34,
		D3DFMT_A2R10G10B10 = 35,
		D3DFMT_A16B16G16R16 = 36,

		D3DFMT_A8P8 = 40,
		D3DFMT_P8 = 41,

		D3DFMT_L8 = 50,
		D3DFMT_A8L8 = 51,
		D3DFMT_A4L4 = 52,

		D3DFMT_V8U8 = 60,
		D3DFMT_L6V5U5 = 61,
		D3DFMT_X8L8V8U8 = 62,
		D3DFMT_Q8W8V8U8 = 63,
		D3DFMT_V16U16 = 64,
		D3DFMT_A2W10V10U10 = 67,

		D3DFMT_D16_LOCKABLE = 70,
		D3DFMT_D32 = 71,
		D3DFMT_D15S1 = 73,
		D3DFMT_D24S8 = 75,
		D3DFMT_D24X8 = 77,
		D3DFMT_D24X4S4 = 79,
		D3DFMT_D16 = 80,

		D3DFMT_D32F_LOCKABLE = 82,
		D3DFMT_D24FS8 = 83,

		D3DFMT_L16 = 81,

		D3DFMT_VERTEXDATA = 100,
		D3DFMT_INDEX16 = 101,
		D3DFMT_INDEX32 = 102,

		D3DFMT_Q16W16V16U16 = 110,

		D3DFMT_R16F = 111,
		D3DFMT_G16R16F = 112,
		D3DFMT_A16B16G16R16F = 113,

		D3DFMT_R32F = 114,
		D3DFMT_G32R32F = 115,
		D3DFMT_A32B32G32R32F = 116,

		D3DFMT_CxV8U8 = 117,

		D3DFMT_UYVY = DDS_MAKE_FOURCC('U', 'Y', 'V', 'Y'),
		D3DFMT_R8G8_B8G8 = DDS_MAKE_FOURCC('R', 'G', 'B', 'G'),
		D3DFMT_YUY2 = DDS_MAKE_FOURCC('Y', 'U', 'Y', '2'),
		D3DFMT_G8R8_G8B8 = DDS_MAKE_FOURCC('G', 'R', 'G', 'B'),

		D3DFMT_DXT1 = DDS_MAKE_FOURCC('D', 'X', 'T', '1'),
		D3DFMT_DXT2 = DDS_MAKE_FOURCC('D', 'X', 'T', '2'),
		D3DFMT_DXT3 = DDS_MAKE_FOURCC('D', 'X', 'T', '3'),
		D3DFMT_DXT4 = DDS_MAKE_FOURCC('D', 'X', 'T', '4'),
		D3DFMT_DXT5 = DDS_MAKE_FOURCC('D', 'X', 'T', '5'),

		D3DFMT_BC4U = DDS_MAKE_FOURCC('B', 'C', '4', 'U'),
		D3DFMT_BC4S = DDS_MAKE_FOURCC('B', 'C', '4', 'S'),
		D3DFMT_BC5U = DDS_MAKE_FOURCC('B', 'C', '5', 'U'),
		D3DFMT_BC5S = DDS_MAKE_FOURCC('B', 'C', '5', 'S'),

		D3DFMT_ATI1 = DDS_MAKE_FOURCC('A', 'T', 'I', '1'),
		D3DFMT_ATI2 = DDS_MAKE_FOURCC('A', 'T', 'I', '2'),

		D3DFMT_AT1N = DDS_MAKE_FOURCC('A', 'T', '1', 'N'),
		D3DFMT_AT2N = DDS_MAKE_FOURCC('A', 'T', '2', 'N'),

		D3DFMT_ETC = DDS_MAKE_FOURCC('E', 'T', 'C', ' '),
		D3DFMT_ETC1 = DDS_MAKE_FOURCC('E', 'T', 'C', '1'),
		D3DFMT_ATC = DDS_MAKE_FOURCC('A', 'T', 'C', ' '),
		D3DFMT_ATCA = DDS_MAKE_FOURCC('A', 'T', 'C', 'A'),
		D3DFMT_ATCI = DDS_MAKE_FOURCC('A', 'T', 'C', 'I'),

		D3DFMT_POWERVR_2BPP = DDS_MAKE_FOURCC('P', 'T', 'C', '2'),
		D3DFMT_POWERVR_4BPP = DDS_MAKE_FOURCC('P', 'T', 'C', '4'),
		D3DFMT_MULTI2_ARGB8 = DDS_MAKE_FOURCC('M', 'E', 'T', '1'),
		D3DFMT_DX10 = DDS_MAKE_FOURCC('D', 'X', '1', '0'),

		D3DFMT_FORCE_DWORD = 0x7fffffff
	};

	enum DDSD
	{
		DDSD_CAPS = 0x1,
		DDSD_HEIGHT = 0x2,
		DDSD_WIDTH = 0x4,
		DDSD_PITCH = 0x8,
		DDSD_PIXELFORMAT = 0x1000,
		DDSD_MIPMAPCOUNT = 0x20000,
		DDSD_LINEARSIZE = 0x80000,
		DDSD_DEPTH = 0x800000,
	};

	enum DDPF
	{
		DDPF_ALPHAPIXELS = 0x1,
		DDPF_ALPHA = 0x2,
		DDPF_FOURCC = 0x4,
		DDPF_RGB = 0x40,
		DDPF_YUV = 0x200,
		DDPF_LUMINANCE = 0x20000,
		DDPF_LUMINANCE_ALPHA = DDPF_LUMINANCE | DDPF_ALPHA,
		DDPF_FOURCC_ALPHAPIXELS = DDPF_FOURCC | DDPF_ALPHAPIXELS,
		DDPF_RGBAPIXELS = DDPF_RGB | DDPF_ALPHAPIXELS,
		DDPF_RGBA = DDPF_RGB | DDPF_ALPHA,
		DDPF_LUMINANCE_ALPHAPIXELS = DDPF_LUMINANCE | DDPF_ALPHAPIXELS,
	};

	enum DDSCAPS
	{
		DDSCAPS_COMPLEX = 0x8,
		DDSCAPS_TEXTURE = 0x1000,
		DDSCAPS_MIPMAP = 0x400000,
	};

	enum DDSCAPS2
	{
		DDSCAPS2_CUBEMAP = 0x200,
		DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,
		DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,
		DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,
		DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,
		DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,
		DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,
		DDSCAPS2_CUBEMAP_ALLFACES = 0xFC00,
		DDSCAPS2_VOLUME = 0x200000,
	};

	enum DXGI_FORMAT
	{
		DXGI_FORMAT_UNKNOWN = 0,
		DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
		DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
		DXGI_FORMAT_R32G32B32A32_UINT = 3,
		DXGI_FORMAT_R32G32B32A32_SINT = 4,
		DXGI_FORMAT_R32G32B32_TYPELESS = 5,
		DXGI_FORMAT_R32G32B32_FLOAT = 6,
		DXGI_FORMAT_R32G32B32_UINT = 7,
		DXGI_FORMAT_R32G32B32_SINT = 8,
		DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
		DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
		DXGI_FORMAT_R16G16B16A16_UNORM = 11,
		DXGI_FORMAT_R16G16B16A16_UINT = 12,
		DXGI_FORMAT_R16G16B16A16_SNORM = 13,
		DXGI_FORMAT_R16G16B16A16_SINT = 14,
		DXGI_FORMAT_R32G32_TYPELESS = 15,
		DXGI_FORMAT_R32G32_FLOAT = 16,
		DXGI_FORMAT_R32G32_UINT = 17,
		DXGI_FORMAT_R32G32_SINT = 18,
		DXGI_FORMAT_R32G8X24_TYPELESS = 19,
		DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
		DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
		DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
		DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
		DXGI_FORMAT_R10G10B10A2_UNORM = 24,
		DXGI_FORMAT_R10G10B10A2_UINT = 25,
		DXGI_FORMAT_R11G11B10_FLOAT = 26,
		DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
		DXGI_FORMAT_R8G8B8A8_UNORM = 28,
		DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
		DXGI_FORMAT_R8G8B8A8_UINT = 30,
		DXGI_FORMAT_R8G8B8A8_SNORM = 31,
		DXGI_FORMAT_R8G8B8A8_SINT = 32,
		DXGI_FORMAT_R16G16_TYPELESS = 33,
		DXGI_FORMAT_R16G16_FLOAT = 34,
		DXGI_FORMAT_R16G16_UNORM = 35,
		DXGI_FORMAT_R16G16_UINT = 36,
		DXGI_FORMAT_R16G16_SNORM = 37,
		DXGI_FORMAT_R16G16_SINT = 38,
		DXGI_FORMAT_R32_TYPELESS = 39,
		DXGI_FORMAT_D32_FLOAT = 40,
		DXGI_FORMAT_R32_FLOAT = 41,
		DXGI_FORMAT_R32_UINT = 42,
		DXGI_FORMAT_R32_SINT = 43,
		DXGI_FORMAT_R24G8_TYPELESS = 44,
		DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
		DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
		DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
		DXGI_FORMAT_R8G8_TYPELESS = 48,
		DXGI_FORMAT_R8G8_UNORM = 49,
		DXGI_FORMAT_R8G8_UINT = 50,
		DXGI_FORMAT_R8G8_SNORM = 51,
		DXGI_FORMAT_R8G8_SINT = 52,
		DXGI_FORMAT_R16_TYPELESS = 53,
		DXGI_FORMAT_R16_FLOAT = 54,
		DXGI_FORMAT_D16_UNORM = 55,
		DXGI_FORMAT_R16_UNORM = 56,
		DXGI_FORMAT_R16_UINT = 57,
		DXGI_FORMAT_R16_SNORM = 58,
		DXGI_FORMAT_R16_SINT = 59,
		DXGI_FORMAT_R8_TYPELESS = 60,
		DXGI_FORMAT_R8_UNORM = 61,
		DXGI_FORMAT_R8_UINT = 62,
		DXGI_FORMAT_R8_SNORM = 63,
		DXGI_FORMAT_R8_SINT = 64,
		DXGI_FORMAT_A8_UNORM = 65,
		DXGI_FORMAT_R1_UNORM = 66,
		DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
		DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
		DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
		DXGI_FORMAT_BC1_TYPELESS = 70,
		DXGI_FORMAT_BC1_UNORM = 71,
		DXGI_FORMAT_BC1_UNORM_SRGB = 72,
		DXGI_FORMAT_BC2_TYPELESS = 73,
		DXGI_FORMAT_BC2_UNORM = 74,
		DXGI_FORMAT_BC2_UNORM_SRGB = 75,
		DXGI_FORMAT_BC3_TYPELESS = 76,
		DXGI_FORMAT_BC3_UNORM = 77,
		DXGI_FORMAT_BC3_UNORM_SRGB = 78,
		DXGI_FORMAT_BC4_TYPELESS = 79,
		DXGI_FORMAT_BC4_UNORM = 80,
		DXGI_FORMAT_BC4_SNORM = 81,
		DXGI_FORMAT_BC5_TYPELESS = 82,
		DXGI_FORMAT_BC5_UNORM = 83,
		DXGI_FORMAT_BC5_SNORM = 84,
		DXGI_FORMAT_B5G6R5_UNORM = 85,
		DXGI_FORMAT_B5G5R5A1_UNORM = 86,
		DXGI_FORMAT_B8G8R8A8_UNORM = 87,
		DXGI_FORMAT_B8G8R8X8_UNORM = 88,
		DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
		DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
		DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
		DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
		DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
		DXGI_FORMAT_BC6H_TYPELESS = 94,
		DXGI_FORMAT_BC6H_UF16 = 95,
		DXGI_FORMAT_BC6H_SF16 = 96,
		DXGI_FORMAT_BC7_TYPELESS = 97,
		DXGI_FORMAT_BC7_UNORM = 98,
		DXGI_FORMAT_BC7_UNORM_SRGB = 99,
		DXGI_FORMAT_AYUV = 100,
		DXGI_FORMAT_Y410 = 101,
		DXGI_FORMAT_Y416 = 102,
		DXGI_FORMAT_NV12 = 103,
		DXGI_FORMAT_P010 = 104,
		DXGI_FORMAT_P016 = 105,
		DXGI_FORMAT_420_OPAQUE = 106,
		DXGI_FORMAT_YUY2 = 107,
		DXGI_FORMAT_Y210 = 108,
		DXGI_FORMAT_Y216 = 109,
		DXGI_FORMAT_NV11 = 110,
		DXGI_FORMAT_AI44 = 111,
		DXGI_FORMAT_IA44 = 112,
		DXGI_FORMAT_P8 = 113,
		DXGI_FORMAT_A8P8 = 114,
		DXGI_FORMAT_B4G4R4A4_UNORM = 115,

		DXGI_FORMAT_P208 = 130,
		DXGI_FORMAT_V208 = 131,
		DXGI_FORMAT_V408 = 132,
		DXGI_FORMAT_ASTC_4X4_TYPELESS = 133,
		DXGI_FORMAT_ASTC_4X4_UNORM = 134,
		DXGI_FORMAT_ASTC_4X4_UNORM_SRGB = 135,
		DXGI_FORMAT_ASTC_5X4_TYPELESS = 137,
		DXGI_FORMAT_ASTC_5X4_UNORM = 138,
		DXGI_FORMAT_ASTC_5X4_UNORM_SRGB = 139,
		DXGI_FORMAT_ASTC_5X5_TYPELESS = 141,
		DXGI_FORMAT_ASTC_5X5_UNORM = 142,
		DXGI_FORMAT_ASTC_5X5_UNORM_SRGB = 143,
		DXGI_FORMAT_ASTC_6X5_TYPELESS = 145,
		DXGI_FORMAT_ASTC_6X5_UNORM = 146,
		DXGI_FORMAT_ASTC_6X5_UNORM_SRGB = 147,
		DXGI_FORMAT_ASTC_6X6_TYPELESS = 149,
		DXGI_FORMAT_ASTC_6X6_UNORM = 150,
		DXGI_FORMAT_ASTC_6X6_UNORM_SRGB = 151,
		DXGI_FORMAT_ASTC_8X5_TYPELESS = 153,
		DXGI_FORMAT_ASTC_8X5_UNORM = 154,
		DXGI_FORMAT_ASTC_8X5_UNORM_SRGB = 155,
		DXGI_FORMAT_ASTC_8X6_TYPELESS = 157,
		DXGI_FORMAT_ASTC_8X6_UNORM = 158,
		DXGI_FORMAT_ASTC_8X6_UNORM_SRGB = 159,
		DXGI_FORMAT_ASTC_8X8_TYPELESS = 161,
		DXGI_FORMAT_ASTC_8X8_UNORM = 162,
		DXGI_FORMAT_ASTC_8X8_UNORM_SRGB = 163,
		DXGI_FORMAT_ASTC_10X5_TYPELESS = 165,
		DXGI_FORMAT_ASTC_10X5_UNORM = 166,
		DXGI_FORMAT_ASTC_10X5_UNORM_SRGB = 167,
		DXGI_FORMAT_ASTC_10X6_TYPELESS = 169,
		DXGI_FORMAT_ASTC_10X6_UNORM = 170,
		DXGI_FORMAT_ASTC_10X6_UNORM_SRGB = 171,
		DXGI_FORMAT_ASTC_10X8_TYPELESS = 173,
		DXGI_FORMAT_ASTC_10X8_UNORM = 174,
		DXGI_FORMAT_ASTC_10X8_UNORM_SRGB = 175,
		DXGI_FORMAT_ASTC_10X10_TYPELESS = 177,
		DXGI_FORMAT_ASTC_10X10_UNORM = 178,
		DXGI_FORMAT_ASTC_10X10_UNORM_SRGB = 179,
		DXGI_FORMAT_ASTC_12X10_TYPELESS = 181,
		DXGI_FORMAT_ASTC_12X10_UNORM = 182,
		DXGI_FORMAT_ASTC_12X10_UNORM_SRGB = 183,
		DXGI_FORMAT_ASTC_12X12_TYPELESS = 185,
		DXGI_FORMAT_ASTC_12X12_UNORM = 186,
		DXGI_FORMAT_ASTC_12X12_UNORM_SRGB = 187, DXGI_FORMAT_LAST = DXGI_FORMAT_ASTC_12X12_UNORM_SRGB,
		DXGI_FORMAT_FORCE_UINT = 0xffffffffUL
	};

	enum D3D10_RESOURCE_DIMENSION
	{
		D3D10_RESOURCE_DIMENSION_UNKNOWN = 0,
		D3D10_RESOURCE_DIMENSION_BUFFER = 1,
		D3D10_RESOURCE_DIMENSION_TEXTURE1D = 2,
		D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3,
		D3D10_RESOURCE_DIMENSION_TEXTURE3D = 4
	};

	enum DDS_Format
	{
		// unorm formats
		FORMAT_R8_UNORM = 0, FORMAT_FIRST = FORMAT_R8_UNORM,
		FORMAT_RG8_UNORM,
		FORMAT_RGB8_UNORM,
		FORMAT_RGBA8_UNORM,

		FORMAT_R16_UNORM,
		FORMAT_RG16_UNORM,
		FORMAT_RGB16_UNORM,
		FORMAT_RGBA16_UNORM,

		// snorm formats
		FORMAT_R8_SNORM,
		FORMAT_RG8_SNORM,
		FORMAT_RGB8_SNORM,
		FORMAT_RGBA8_SNORM,

		FORMAT_R16_SNORM,
		FORMAT_RG16_SNORM,
		FORMAT_RGB16_SNORM,
		FORMAT_RGBA16_SNORM,

		// Unsigned integer formats
		FORMAT_R8_UINT,
		FORMAT_RG8_UINT,
		FORMAT_RGB8_UINT,
		FORMAT_RGBA8_UINT,

		FORMAT_R16_UINT,
		FORMAT_RG16_UINT,
		FORMAT_RGB16_UINT,
		FORMAT_RGBA16_UINT,

		FORMAT_R32_UINT,
		FORMAT_RG32_UINT,
		FORMAT_RGB32_UINT,
		FORMAT_RGBA32_UINT,

		// Signed integer formats
		FORMAT_R8_SINT,
		FORMAT_RG8_SINT,
		FORMAT_RGB8_SINT,
		FORMAT_RGBA8_SINT,

		FORMAT_R16_SINT,
		FORMAT_RG16_SINT,
		FORMAT_RGB16_SINT,
		FORMAT_RGBA16_SINT,

		FORMAT_R32_SINT,
		FORMAT_RG32_SINT,
		FORMAT_RGB32_SINT,
		FORMAT_RGBA32_SINT,

		// Floating formats
		FORMAT_R16_SFLOAT,
		FORMAT_RG16_SFLOAT,
		FORMAT_RGB16_SFLOAT,
		FORMAT_RGBA16_SFLOAT,

		FORMAT_R32_SFLOAT,
		FORMAT_RG32_SFLOAT,
		FORMAT_RGB32_SFLOAT,
		FORMAT_RGBA32_SFLOAT,

		// sRGB formats
		FORMAT_R8_SRGB,
		FORMAT_RG8_SRGB,
		FORMAT_RGB8_SRGB,
		FORMAT_RGBA8_SRGB,

		// Packed formats
		FORMAT_RGB10A2_UNORM,
		FORMAT_RGB10A2_UINT,
		FORMAT_RGB9E5_UFLOAT,
		FORMAT_RG11B10_UFLOAT,
		FORMAT_RG3B2_UNORM,
		FORMAT_R5G6B5_UNORM,
		FORMAT_RGB5A1_UNORM,
		FORMAT_RGBA4_UNORM,

		// Swizzle formats
		FORMAT_BGRX8_UNORM,
		FORMAT_BGRA8_UNORM,
		FORMAT_BGRX8_SRGB,
		FORMAT_BGRA8_SRGB,

		// Luminance Alpha formats
		FORMAT_L8_UNORM,
		FORMAT_A8_UNORM,
		FORMAT_LA8_UNORM,
		FORMAT_L16_UNORM,
		FORMAT_A16_UNORM,
		FORMAT_LA16_UNORM,

		// Depth formats
		FORMAT_D16_UNORM,
		FORMAT_D24_UNORM,
		FORMAT_D24S8_UNORM,
		FORMAT_D32_UFLOAT,
		FORMAT_D32_UFLOAT_S8_UNORM,

		// Compressed formats
		FORMAT_RGB_DXT1_UNORM, FORMAT_COMPRESSED_FIRST = FORMAT_RGB_DXT1_UNORM,
		FORMAT_RGBA_DXT1_UNORM,
		FORMAT_RGBA_DXT3_UNORM,
		FORMAT_RGBA_DXT5_UNORM,
		FORMAT_RGBA_BC5U_UNORM,
		FORMAT_R_ATI1N_UNORM,
		FORMAT_R_ATI1N_SNORM,
		FORMAT_RG_ATI2N_UNORM,
		FORMAT_RG_ATI2N_SNORM,
		FORMAT_RGB_BP_UFLOAT,
		FORMAT_RGB_BP_SFLOAT,
		FORMAT_RGB_BP_UNORM,
		FORMAT_RGB_PVRTC_8X8_UNORM,
		FORMAT_RGB_PVRTC_16X8_UNORM,
		FORMAT_RGBA_PVRTC_8X8_UNORM,
		FORMAT_RGBA_PVRTC_16X8_UNORM,
		FORMAT_RGBA_PVRTC2_8X8_UNORM,
		FORMAT_RGBA_PVRTC2_16X8_UNORM,
		FORMAT_RGB_ATC_UNORM,
		FORMAT_RGBA_ATC_EXPLICIT_UNORM,
		FORMAT_RGBA_ATC_INTERPOLATED_UNORM,
		FORMAT_RGB_ETC_UNORM,
		FORMAT_RGB_ETC2_UNORM,
		FORMAT_RGBA_ETC2_PUNCHTHROUGH_UNORM,
		FORMAT_RGBA_ETC2_UNORM,
		FORMAT_R11_EAC_UNORM,
		FORMAT_R11_EAC_SNORM,
		FORMAT_RG11_EAC_UNORM,
		FORMAT_RG11_EAC_SNORM,
		FORMAT_RGBA_ASTC_4X4_UNORM,
		FORMAT_RGBA_ASTC_5X4_UNORM,
		FORMAT_RGBA_ASTC_5X5_UNORM,
		FORMAT_RGBA_ASTC_6X5_UNORM,
		FORMAT_RGBA_ASTC_6X6_UNORM,
		FORMAT_RGBA_ASTC_8X5_UNORM,
		FORMAT_RGBA_ASTC_8X6_UNORM,
		FORMAT_RGBA_ASTC_8X8_UNORM,
		FORMAT_RGBA_ASTC_10X5_UNORM,
		FORMAT_RGBA_ASTC_10X6_UNORM,
		FORMAT_RGBA_ASTC_10X8_UNORM,
		FORMAT_RGBA_ASTC_10X10_UNORM,
		FORMAT_RGBA_ASTC_12X10_UNORM,
		FORMAT_RGBA_ASTC_12X12_UNORM,

		// Compressed sRGB formats
		FORMAT_RGB_DXT1_SRGB,
		FORMAT_RGBA_DXT1_SRGB,
		FORMAT_RGBA_DXT3_SRGB,
		FORMAT_RGBA_DXT5_SRGB,
		FORMAT_RGB_BP_SRGB,
		FORMAT_RGB_PVRTC_8X8_SRGB,
		FORMAT_RGB_PVRTC_16X8_SRGB,
		FORMAT_RGBA_PVRTC_8X8_SRGB,
		FORMAT_RGBA_PVRTC_16X8_SRGB,
		FORMAT_RGBA_PVRTC2_8X8_SRGB,
		FORMAT_RGBA_PVRTC2_16X8_SRGB,
		FORMAT_RGB_ETC_SRGB,
		FORMAT_RGBA_ETC2_PUNCHTHROUGH_SRGB,
		FORMAT_RGBA_ETC2_SRGB,
		FORMAT_RGBA_ASTC_4X4_SRGB,
		FORMAT_RGBA_ASTC_5X4_SRGB,
		FORMAT_RGBA_ASTC_5X5_SRGB,
		FORMAT_RGBA_ASTC_6X5_SRGB,
		FORMAT_RGBA_ASTC_6X6_SRGB,
		FORMAT_RGBA_ASTC_8X5_SRGB,
		FORMAT_RGBA_ASTC_8X6_SRGB,
		FORMAT_RGBA_ASTC_8X8_SRGB,
		FORMAT_RGBA_ASTC_10X5_SRGB,
		FORMAT_RGBA_ASTC_10X6_SRGB,
		FORMAT_RGBA_ASTC_10X8_SRGB,
		FORMAT_RGBA_ASTC_10X10_SRGB,
		FORMAT_RGBA_ASTC_12X10_SRGB,
		FORMAT_RGBA_ASTC_12X12_SRGB,
		FORMAT_COMPRESSED_LAST = FORMAT_RGBA_ASTC_12X12_SRGB,
		FORMAT_LAST = FORMAT_RGBA_ASTC_12X12_SRGB,
		FORMAT_COUNT,
	};

	struct DDSCaps
	{
		dds_uint surface;
		dds_uint cubemap;
	};

	struct DDPixelFormat
	{
		dds_uint    size;
		dds_uint    flags;
		D3DFORMAT   fourcc;
		dds_uint    bpp;
		dds_uint    mask[4];
	};

	struct DDColorKey
	{
		dds_uint    low;
		dds_uint    high;
	};

	struct DDS_HEADER
	{
		dds_ubyte   header[4];
		dds_uint    size;
		dds_uint    flags;
		dds_uint    height;
		dds_uint    width;
		dds_uint    pitch;
		dds_uint    depth;
		dds_uint    mip_level;
		dds_uint    alpha_bit_depth;
		dds_uint    reserved;
		dds_uint    surface;
		DDColorKey  dest_overlay;
		DDColorKey  dest_blit;
		DDColorKey  src_overlay;
		DDColorKey  src_blit;
		DDPixelFormat format;
		DDSCaps     caps;
		dds_uint    reserved2[3];
	};

	struct DDS_HEADER_DXT10
	{
		DXGI_FORMAT format;
		D3D10_RESOURCE_DIMENSION dimension;
		dds_uint miscFlag;
		dds_uint arraySize;
		dds_uint miscFlags2;
	};

	struct DDS_FORMAT
	{
		DDPF DDPixelFormat;
		D3DFORMAT D3DFormat;
		DXGI_FORMAT DXGIFormat;
		Format Format;
		dds_uint mask[4];
	};

	static DDS_FORMAT DDS_FormatTable[] =
	{
		// unorm formats
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8_UNORM, Format::R8UNorm, 0x00FF0000, 0x00000000, 0x00000000, 0x00000000 },			//R8_UNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8G8_UNORM, Format::R8G8UNorm, 0x00FF0000, 0x0000FF00, 0x00000000, 0x00000000 },		//RG8_UNORM,
		{ DDPF_RGB, D3DFMT_R8G8B8, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0x00FF0000, 0x0000FF00, 0x000000FF, 0x00000000 },			//RGB8_UNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8G8B8A8_UNORM, Format::R8G8B8UNorm, 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000 },	//RGBA8_UNORM,

		{ DDPF_FOURCC, D3DFMT_L16, DXGI_FORMAT_R16_UNORM, Format::R16UNorm, 0x0000FFFF, 0x00000000, 0x00000000, 0x00000000 },			//R16_UNORM,
		{ DDPF_FOURCC, D3DFMT_G16R16, DXGI_FORMAT_R16G16_UNORM, Format::R16G16UNorm,0x0000FFFF, 0xFFFF0000, 0x00000000, 0x00000000 },	//RG16_UNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//RGB16_UNORM,
		{ DDPF_FOURCC, D3DFMT_A16B16G16R16, DXGI_FORMAT_R16G16B16A16_UNORM, Format::R16G16B16UNorm, 0, 0, 0, 0 },	//RGBA16_UNORM,

		// snorm formats
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8_SNORM, Format::R8SNorm, 0, 0, 0, 0 },					//R8_SNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8G8_SNORM, Format::R8G8SNorm, 0, 0, 0, 0 },				//RG8_SNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },				//RGB8_SNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8G8B8A8_SNORM, Format::R8G8B8A8SNorm, 0, 0, 0, 0 },		//RGBA8_SNORM,

		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16_SNORM, Format::R16SNorm, 0, 0, 0, 0 },					//R16_SNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16G16_SNORM, Format::R16G16SNorm, 0, 0, 0, 0 },				//RG16_SNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },					//RGB16_SNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16G16B16A16_SNORM, Format::R16G16B16A16SNorm, 0, 0, 0, 0 }, //RGBA16_SNORM,

		// Unsigned integer formats
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8_UINT, Format::R8UInt, 0, 0, 0, 0 },					//R8_UINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8G8_UINT, Format::R8G8UInt, 0, 0, 0, 0 },				//RG8_UINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },				//RGB8_UINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8G8B8A8_UINT, Format::R8G8B8A8UInt, 0, 0, 0, 0 },		//RGBA8_UINT,

		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16_UINT, Format::R16UInt, 0, 0, 0, 0 },						//R16_UINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16G16_UINT, Format::R16G16UInt, 0, 0, 0, 0 },				//RG16_UINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },					//RGB16_UINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16G16B16A16_UINT, Format::R16G16B16A16UInt, 0, 0, 0, 0 },	//RGBA16_UINT,

		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32_UINT, Format::R32UInt, 0, 0, 0, 0 },						//R32_UINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32G32_UINT, Format::R32G32UInt, 0, 0, 0, 0 },				//RG32_UINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32G32B32_UINT, Format::R32G32B32UInt, 0, 0, 0, 0 },			//RGB32_UINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32G32B32A32_UINT, Format::R32G32B32A32UInt, 0, 0, 0, 0 },	//RGBA32_UINT,

		// Signed integer formats
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8_SINT, Format::R8SInt, 0, 0, 0, 0 },					//R8_SINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8G8_SINT, Format::R8G8SInt, 0, 0, 0, 0 },				//RG8_SINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },				//RGB8_SINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8G8B8A8_SINT, Format::R8G8B8A8SInt, 0, 0, 0, 0 },		//RGBA8_SINT,

		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16_SINT, Format::R16SInt, 0, 0, 0, 0 },						//R16_SINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16G16_SINT, Format::R16G16SInt, 0, 0, 0, 0 },				//RG16_SINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::R16G16SInt, 0, 0, 0, 0 },					//RGB16_SINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16G16B16A16_SINT, Format::R16G16B16A16SInt, 0, 0, 0, 0 },	//RGBA16_SINT,

		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32_SINT, Format::R32SInt, 0, 0, 0, 0 },						//R32_SINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32G32_SINT, Format::R32G32SInt, 0, 0, 0, 0 },				//RG32_SINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32G32B32_SINT, Format::R32G32B32SInt, 0, 0, 0, 0 },			//RGB32_SINT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32G32B32A32_SINT, Format::R32G32B32A32SInt, 0, 0, 0, 0 },	//RGBA32_SINT,

		// Floating formats
		{ DDPF_FOURCC, D3DFMT_R16F, DXGI_FORMAT_R16_FLOAT, Format::R16SFloat, 0, 0, 0, 0 },								//R16_FLOAT,
		{ DDPF_FOURCC, D3DFMT_G16R16F, DXGI_FORMAT_R16G16_FLOAT, Format::R16G16SFloat, 0, 0, 0, 0 },						//RG16_FLOAT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::R16G16SFloat, 0, 0, 0, 0 },								//RGB16_FLOAT,
		{ DDPF_FOURCC, D3DFMT_A16B16G16R16F, DXGI_FORMAT_R16G16B16A16_FLOAT, Format::R16G16B16A16SFloat, 0, 0, 0, 0 },	//RGBA16_FLOAT,

		{ DDPF_FOURCC, D3DFMT_R32F, DXGI_FORMAT_R32_FLOAT, Format::R32SFloat, 0xFFFFFFFF, 0, 0, 0 },						//R32_FLOAT,
		{ DDPF_FOURCC, D3DFMT_G32R32F, DXGI_FORMAT_R32G32_FLOAT, Format::R32G32SFloat, 0, 0, 0, 0 },						//RG32_FLOAT,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::R32G32SFloat, 0, 0, 0, 0 },								//RGB32_FLOAT,
		{ DDPF_FOURCC, D3DFMT_A32B32G32R32F, DXGI_FORMAT_R32G32B32A32_FLOAT, Format::R32G32B32A32SFloat, 0, 0, 0, 0 },	//RGBA32_FLOAT,

		// sRGB formats
		{ DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },					//SR8,
		{ DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },					//SRG8,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_B8G8R8X8_UNORM_SRGB, Format::R8G8B8SRGB, 0, 0, 0, 0 },		//SRGB8,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8G8B8A8_UNORM_SRGB, Format::R8G8B8A8SRGB, 0, 0, 0, 0 },		//SRGB8_ALPHA8,

		// Packed formats
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R10G10B10A2_UNORM, Format::A2B10G10R10UNormPack32, 0x3FF00000, 0x000FFC00, 0x000003FF, 0xC0000000 }, //RGB10A2_UNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R10G10B10A2_UINT, Format::A2B10G10R10UIntPack32, 0, 0, 0, 0 },										 //RGB10A2U,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R9G9B9E5_SHAREDEXP, Format::E5B9G9R9UFloatPack32, 0, 0, 0, 0 },										 //RGB9E5,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R11G11B10_FLOAT, Format::B10G11R11UFloatPack32, 0, 0, 0, 0 },										 //RG11B10F,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN,  Format::Undefined, 0x70, 0x38, 0xC0, 0x00 },										         //RG3B2,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_B5G6R5_UNORM, Format::B5G6R5UNormPack16, 0xf800, 0x07e0, 0x001f, 0x0000 },							 //R5G6B5,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_B5G5R5A1_UNORM, Format::A1R5G5B5UNormPack16, 0x7c00, 0x03e0, 0x001f, 0x8000 },						 //RGB5A1,
		{ DDPF_FOURCC, D3DFMT_A4R4G4B4, DXGI_FORMAT_B4G4R4A4_UNORM, Format::R4G4B4A4UNormPack16, 0x0F00, 0x00F0, 0x000F, 0xF000 },					 //RGBA4,

		// Swizzle formats
		{ DDPF_RGB, D3DFMT_X8B8G8R8, DXGI_FORMAT_B8G8R8X8_UNORM, Format::B8G8R8UNorm, 0x00FF0000, 0x0000FF00, 0x000000FF, 0x00000000 },		    //FORMAT_BGRX8_UNORM,
		{ DDPF_RGBA, D3DFMT_A8R8G8B8, DXGI_FORMAT_B8G8R8A8_UNORM, Format::A8B8G8R8UNormPack32, 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000 }, //BGRA8_UNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_B8G8R8X8_UNORM_SRGB, Format::B8G8R8SRGB, 0x00FF0000, 0x0000FF00, 0x000000FF, 0x00000000 },	    //SBGR8_UNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_B8G8R8A8_UNORM_SRGB, Format::B8G8R8A8SRGB, 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000 },		//SBGR8_ALPHA8_UNORM,

		// Luminance Alpha formats
		{ DDPF_LUMINANCE, D3DFMT_L8, DXGI_FORMAT_R8_UNORM, Format::L8UNorm, 0x000000FF, 0x00000000, 0x00000000, 0x00000000 },				//L8_UNORM,
		{ DDPF_ALPHA, D3DFMT_A8, DXGI_FORMAT_R8_UNORM, Format::A8UNorm, 0x00000000, 0x00000000, 0x00000000, 0x000000FF },					//A8_UNORM,
		{ DDPF_LUMINANCE_ALPHA, D3DFMT_A8L8, DXGI_FORMAT_R8G8_UNORM, Format::L8A8UNorm, 0x000000FF, 0x00000000, 0x00000000, 0x0000FF00 },	//LA8_UNORM,
		{ DDPF_LUMINANCE, D3DFMT_L16, DXGI_FORMAT_R16_UNORM, Format::L16UNorm, 0x0000FFFF, 0x00000000, 0x00000000, 0x00000000 },				//L16_UNORM,
		{ DDPF_ALPHA, D3DFMT_UNKNOWN, DXGI_FORMAT_R16_UNORM, Format::A16UNorm, 0x00000000, 0x00000000, 0x00000000, 0x0000FFFF },				//A16_UNORM,
		{ DDPF_LUMINANCE_ALPHA, D3DFMT_UNKNOWN, DXGI_FORMAT_R16_UNORM, Format::L16A16UNorm, 0x0000FFFF, 0x00000000, 0x00000000, 0xFFFF0000 },//LA16_UNORM,

		// Depth formats
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_D16_UNORM, Format::D16UNorm, 0, 0, 0, 0 },						//D16,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::X8_D24UNormPack32, 0, 0, 0, 0 },				//D24X8,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_D24_UNORM_S8_UINT, Format::D24UNorm_S8UInt, 0, 0, 0, 0 },		//D24S8,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_D32_FLOAT, Format::D32_SFLOAT, 0, 0, 0, 0 },						//D32F,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, Format::D32_SFLOAT_S8UInt, 0, 0, 0, 0 },	//D32FS8X24,

		// Compressed formats
		{ DDPF_FOURCC, D3DFMT_DXT1, DXGI_FORMAT_BC1_UNORM, Format::BC1RGBUNormBlock, 0, 0, 0, 0 },				//RGB_DXT1,
		{ DDPF_FOURCC_ALPHAPIXELS, D3DFMT_DXT1, DXGI_FORMAT_BC1_UNORM, Format::BC1RGBAUNormBlock, 0, 0, 0, 0 },  //RGBA_DXT1,
		{ DDPF_FOURCC_ALPHAPIXELS, D3DFMT_DXT3, DXGI_FORMAT_BC2_UNORM, Format::BC2UNormBlock, 0, 0, 0, 0 },		//RGBA_DXT3,
		{ DDPF_FOURCC_ALPHAPIXELS, D3DFMT_DXT5, DXGI_FORMAT_BC3_UNORM, Format::BC3UNormBlock, 0, 0, 0, 0 },		//RGBA_DXT5,
		{ DDPF_FOURCC_ALPHAPIXELS, D3DFMT_BC5U, DXGI_FORMAT_BC5_UNORM, Format::BC5UNormBlock, 0, 0, 0, 0 },		//RGBA_DXT5,
		{ DDPF_FOURCC, D3DFMT_ATI1, DXGI_FORMAT_BC4_UNORM, Format::BC4UNormBlock, 0, 0, 0, 0 },					//R_ATI1N_UNORM,
		{ DDPF_FOURCC, D3DFMT_AT1N, DXGI_FORMAT_BC4_SNORM, Format::BC4SNormBlock, 0, 0, 0, 0 },					//R_ATI1N_SNORM,
		{ DDPF_FOURCC, D3DFMT_ATI2, DXGI_FORMAT_BC5_UNORM, Format::BC5UNormBlock, 0, 0, 0, 0 },					//RG_ATI2N_UNORM,
		{ DDPF_FOURCC, D3DFMT_AT2N, DXGI_FORMAT_BC5_SNORM, Format::BC5SNormBlock, 0, 0, 0, 0 },					//RG_ATI2N_SNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC6H_UF16, Format::BC6HUFloatBlock, 0, 0, 0, 0 },				//RGB_BP_UF16,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC6H_SF16, Format::BC6HSFloatBlock, 0, 0, 0, 0 },				//RGB_BP_SF16,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC7_UNORM, Format::BC7UNormBlock, 0, 0, 0, 0 },					//RGB_BP_UNORM,
		{ DDPF_FOURCC, D3DFMT_POWERVR_4BPP, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },				//RGB_PVRTC_4BPP,
		{ DDPF_FOURCC, D3DFMT_POWERVR_2BPP, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },				//RGB_PVRTC_2BPP,
		{ DDPF_FOURCC, D3DFMT_POWERVR_4BPP, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },				//RGBA_PVRTC_4BPP,
		{ DDPF_FOURCC, D3DFMT_POWERVR_2BPP, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },				//RGBA_PVRTC_2BPP,
		{ DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//RGBA_PVRTC2_4BPP,
		{ DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//RGBA_PVRTC2_2BPP,
		{ DDPF_FOURCC, D3DFMT_ATC, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },							//ATC_RGB,
		{ DDPF_FOURCC, D3DFMT_ATCA, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//ATC_RGBA_EXPLICIT_ALPHA,
		{ DDPF_FOURCC, D3DFMT_ATCI, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//ATC_RGBA_INTERPOLATED_ALPHA,
		{ DDPF_FOURCC, D3DFMT_ETC, DXGI_FORMAT_UNKNOWN, Format::ETC2R8G8B8UNormBlock, 0, 0, 0, 0 },				//FORMAT_RGB_ETC_UNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//FORMAT_RGB2_ETC_UNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//RGBA_ETC2_PUNCHTHROUGH_UNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//RGBA_ETC2_UNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//R11_EAC_UNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//R11_EAC_SNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//RG11_EAC_UNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//RG11_EAC_SNORM,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_4X4_UNORM, Format::ASTC4x4UNormBlock, 0, 0, 0, 0 },			//RGBA_ASTC_4x4,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_5X4_UNORM, Format::ASTC5x4UNormBlock, 0, 0, 0, 0 },			//RGBA_ASTC_5x4,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_5X5_UNORM, Format::ASTC5x5UNormBlock, 0, 0, 0, 0 },			//RGBA_ASTC_5x5,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_6X5_UNORM, Format::ASTC6x5UNormBlock, 0, 0, 0, 0 },			//RGBA_ASTC_6x5,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_6X6_UNORM, Format::ASTC6x6UNormBlock, 0, 0, 0, 0 },			//RGBA_ASTC_6x6,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_8X5_UNORM, Format::ASTC8x5UNormBlock, 0, 0, 0, 0 },			//RGBA_ASTC_8x5,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_8X6_UNORM, Format::ASTC8x6UNormBlock, 0, 0, 0, 0 },			//RGBA_ASTC_8x6,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_8X8_UNORM, Format::ASTC8x8UNormBlock, 0, 0, 0, 0 },			//RGBA_ASTC_8x8,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_10X5_UNORM,Format::ASTC10x5UNormBlock,  0, 0, 0, 0 },		//RGBA_ASTC_10x5,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_10X6_UNORM, Format::ASTC10x6UNormBlock, 0, 0, 0, 0 },		//RGBA_ASTC_10x6,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_10X8_UNORM, Format::ASTC10x8UNormBlock, 0, 0, 0, 0 },		//RGBA_ASTC_10x8,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_10X10_UNORM, Format::ASTC10x10UNormBlock, 0, 0, 0, 0 },		//RGBA_ASTC_10x10,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_12X10_UNORM, Format::ASTC12x10UNormBlock, 0, 0, 0, 0 },		//RGBA_ASTC_12x10,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_12X12_UNORM, Format::ASTC12x12UNormBlock, 0, 0, 0, 0 },		//RGBA_ASTC_12x12,

		// Compressed sRGB formats
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC1_UNORM_SRGB, Format::BC1RGBSRGBBlock, 0, 0, 0, 0 },			//FORMAT_RGB_DXT1_SRGB,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC1_UNORM_SRGB, Format::BC1RGBASRGBBlock, 0, 0, 0, 0 },			//FORMAT_RGBA_DXT1_SRGB,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC2_UNORM_SRGB, Format::BC2SRGBBlock, 0, 0, 0, 0 },				//FORMAT_RGBA_DXT3_SRGB,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC3_UNORM_SRGB, Format::BC3SRGBBlock, 0, 0, 0, 0 },				//FORMAT_RGBA_DXT5_SRGB,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC7_UNORM_SRGB, Format::BC7SRGBBlock, 0, 0, 0, 0 },				//FORMAT_RGB_BP_SRGB,
		{ DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//FORMAT_RGB_PVRTC1_8X8_SRGB,
		{ DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//FORMAT_RGB_PVRTC1_16X8_SRGB,
		{ DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//FORMAT_RGBA_PVRTC1_8X8_SRGB,
		{ DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//FORMAT_RGBA_PVRTC1_16X8_SRGB,
		{ DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//FORMAT_RGBA_PVRTC2_8X8_SRGB,
		{ DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//FORMAT_RGBA_PVRTC2_16X8_SRGB,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::ETC2R8G8B8SRGBBlock, 0, 0, 0, 0 },				//FORMAT_RGB_ETC_SRGB,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//FORMAT_RGBA_ETC2_PUNCHTHROUGH_SRGB,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN, Format::Undefined, 0, 0, 0, 0 },						//FORMAT_RGBA_ETC2_SRGB,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_4X4_UNORM_SRGB, Format::ASTC4x4SRGBBlock, 0, 0, 0, 0 },		//RGBA_ASTC_4x4,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_5X4_UNORM_SRGB, Format::ASTC5x4SRGBBlock, 0, 0, 0, 0 },		//RGBA_ASTC_5x4,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_5X5_UNORM_SRGB, Format::ASTC5x5SRGBBlock, 0, 0, 0, 0 },		//RGBA_ASTC_5x5,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_6X5_UNORM_SRGB, Format::ASTC6x5SRGBBlock, 0, 0, 0, 0 },		//RGBA_ASTC_6x5,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_6X6_UNORM_SRGB, Format::ASTC6x6SRGBBlock, 0, 0, 0, 0 },		//RGBA_ASTC_6x6,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_8X5_UNORM_SRGB, Format::ASTC8x5SRGBBlock, 0, 0, 0, 0 },		//RGBA_ASTC_8x5,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_8X6_UNORM_SRGB, Format::ASTC8x6SRGBBlock, 0, 0, 0, 0 },		//RGBA_ASTC_8x6,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_8X8_UNORM_SRGB, Format::ASTC8x8SRGBBlock, 0, 0, 0, 0 },		//RGBA_ASTC_8x8,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_10X5_UNORM_SRGB,Format::ASTC10x5SRGBBlock,  0, 0, 0, 0 },	//RGBA_ASTC_10x5,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_10X6_UNORM_SRGB, Format::ASTC10x6SRGBBlock, 0, 0, 0, 0 },	//RGBA_ASTC_10x6,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_10X8_UNORM_SRGB, Format::ASTC10x8SRGBBlock, 0, 0, 0, 0 },	//RGBA_ASTC_10x8,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_10X10_UNORM_SRGB, Format::ASTC10x10SRGBBlock, 0, 0, 0, 0 }, //RGBA_ASTC_10x10,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_12X10_UNORM_SRGB, Format::ASTC12x10SRGBBlock, 0, 0, 0, 0 }, //RGBA_ASTC_12x10,
		{ DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_ASTC_12X12_UNORM_SRGB, Format::ASTC12x12SRGBBlock, 0, 0, 0, 0 }, //RGBA_ASTC_12x12,
	};

	inline bool DDStoCubeMap(char* buffer, std::size_t mipBase, std::size_t mipLevel, std::size_t width, std::size_t height, std::size_t depth, std::size_t bpp, char* stream) noexcept
	{
		std::size_t offset1 = 0;
		std::size_t offset2 = 0;
		std::size_t allLayerSize = 0;

		std::size_t w = width;
		std::size_t h = height;

		std::size_t pixelSize = 0;
		if (bpp == 24)
			pixelSize = 3;
		else if (bpp == 32)
			pixelSize = 4;
		else if (bpp == 64)
			pixelSize = 8;
		else if (bpp == 128)
			pixelSize = 16;
		else
			return false;

		for (std::size_t mip = mipBase; mip < mipBase + mipLevel; mip++)
		{
			std::size_t mipSize = w * h * pixelSize;

			w = std::max(w >> 1, (std::size_t)1);
			h = std::max(h >> 1, (std::size_t)1);

			allLayerSize += mipSize;
		}

		w = width;
		h = height;

		for (std::size_t mip = mipBase; mip < mipBase + mipLevel; mip++)
		{
			std::size_t mipSize = w * h * pixelSize;

			for (std::size_t i = 0; i < depth; i++)
			{
				std::size_t offset = allLayerSize * i + offset1;
				std::memcpy(buffer + offset2, (char*)stream + offset, mipSize);
				offset2 += mipSize;
			}

			w = std::max(w >> 1, (std::size_t)1);
			h = std::max(h >> 1, (std::size_t)1);

			offset1 += mipSize;
		}

		return true;
	}

	inline bool DDS_MaskCmp(dds_uint mask[4], DDS_Format format)
	{
		auto& dstmask = DDS_FormatTable[format].mask;
		if (mask[0] == dstmask[0] &&
			mask[1] == dstmask[1] &&
			mask[2] == dstmask[2] &&
			mask[3] == dstmask[3])
		{
			return true;
		}

		return false;
	}

	inline Format DDS_Find(D3DFORMAT fourcc) noexcept
	{
		for (int i = 0; i < FORMAT_COUNT; ++i)
		{
			if (DDS_FormatTable[i].D3DFormat != fourcc)
				continue;
			return DDS_FormatTable[i].Format;
		}

		return Format::Undefined;
	}

	inline Format DDS_Find(DXGI_FORMAT format)
	{
		for (int i = 0; i < FORMAT_COUNT; ++i)
		{
			if (DDS_FormatTable[i].DXGIFormat != format)
				continue;

			return DDS_FormatTable[i].Format;
		}

		return Format::Undefined;
	}

	bool
	DDSHandler::doCanRead(istream& stream) const noexcept
	{
		static const std::uint8_t magic[] = { 'D', 'D', 'S', ' ' };

		std::uint8_t hdr[sizeof(magic)];

		if (stream.read((char*)hdr, sizeof(hdr)))
			return std::memcmp(hdr, magic, sizeof(magic)) == 0;

		return false;
	}

	bool
	DDSHandler::doCanRead(const char* type_name) const noexcept
	{
		return std::strncmp(type_name, "dds", 3) == 0;
	}

	bool
	DDSHandler::doLoad(istream& stream, Texture& image) noexcept
	{
		stream.seekg(0, std::ios_base::end);
		std::size_t size = stream.tellg();
		stream.seekg(0, std::ios_base::beg);

		DDS_HEADER info;
		if (!stream.read((char*)&info, sizeof(info)))
			return false;

		std::size_t offset = sizeof(info);

		DDS_HEADER_DXT10 info10;
		std::memset(&info10, 0, sizeof(info10));

		if (info.format.flags & DDPF_FOURCC && info.format.fourcc == D3DFMT_DX10)
		{
			if (!stream.read((char*)&info10, sizeof(info10)))
				return false;

			offset += sizeof(info10);
		}

		Format format = Format::Undefined;
		if ((info.format.flags & DDPF_FOURCC) && (info.format.fourcc != D3DFMT_DX10))
			format = DDS_Find(info.format.fourcc);
		else if ((info.format.fourcc == D3DFMT_DX10) && (info10.format != DXGI_FORMAT_UNKNOWN))
			format = DDS_Find(info10.format);
		else if ((info.format.flags & (DDPF_RGB | DDPF_ALPHAPIXELS | DDPF_ALPHA | DDPF_YUV | DDPF_LUMINANCE)) && info.format.flags != DDPF_FOURCC_ALPHAPIXELS)
		{
			switch (info.format.bpp)
			{
			case 8:
			{
				if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_L8_UNORM))
					format = Format::L8UNorm;
				else if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_A8_UNORM))
					format = Format::A8UNorm;
				else if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_R8_UNORM))
					format = Format::R8UNorm;
				break;
			}
			case 16:
			{
				if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_LA8_UNORM))
					format = Format::L8A8UNorm;
				else if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_RG8_UNORM))
					format = Format::R8G8UNorm;
				else if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_R5G6B5_UNORM))
					format = Format::R5G6B5UNormPack16;
				else if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_RGB5A1_UNORM))
					format = Format::A1R5G5B5UNormPack16;
				else if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_L16_UNORM))
					format = Format::L16UNorm;
				else if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_A16_UNORM))
					format = Format::A16UNorm;
				else if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_R16_UNORM))
					format = Format::R16UNorm;
				break;
			}
			case 24:
			{
				if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_RGB8_UNORM))
					format = Format::B8G8R8UNorm;
				break;
			}
			case 32:
			{
				if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_BGRX8_UNORM))
					format = Format::B8G8R8UNorm;
				else if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_BGRA8_UNORM))
					format = Format::B8G8R8A8UNorm;
				else if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_RGB10A2_UNORM))
					format = Format::A2R10G10B10UNormPack32;
				else if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_LA16_UNORM))
					format = Format::L16A16UNorm;
				else if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_RG16_UNORM))
					format = Format::R16G16UNorm;
				else if (DDS_MaskCmp(info.format.mask, DDS_Format::FORMAT_R32_SFLOAT))
					format = Format::R32SFloat;
			}
			break;
			}
		}

		if (format == Format::Undefined)
			return false;

		info.depth = std::max<dds_uint>(1, info.depth);
		info.mip_level = std::max<dds_uint>(1, info.mip_level);
		info10.arraySize = std::max<dds_uint>(info10.arraySize, 1);

		std::uint8_t faceCount = 1;
		if (info.caps.cubemap & DDSCAPS2_CUBEMAP_ALLFACES)
		{
			faceCount = 0;

			if (info.caps.cubemap & DDSCAPS2_CUBEMAP_POSITIVEX)
				faceCount++;
			if (info.caps.cubemap & DDSCAPS2_CUBEMAP_NEGATIVEX)
				faceCount++;
			if (info.caps.cubemap & DDSCAPS2_CUBEMAP_POSITIVEY)
				faceCount++;
			if (info.caps.cubemap & DDSCAPS2_CUBEMAP_NEGATIVEY)
				faceCount++;
			if (info.caps.cubemap & DDSCAPS2_CUBEMAP_POSITIVEZ)
				faceCount++;
			if (info.caps.cubemap & DDSCAPS2_CUBEMAP_NEGATIVEZ)
				faceCount++;
		}

		if (info.mip_level > 1 && faceCount > 1 && info.flags & DDSD_PITCH)
		{
			auto length = size - offset;

			auto data = std::make_unique<char[]>(length);
			if (!stream.read((char*)data.get(), length))
				return false;

			if (!image.create(format, info.width, info.height, info.depth * faceCount, info.mip_level, info10.arraySize))
				return false;

			if (!DDStoCubeMap((char*)image.data(), 0, info.mip_level, info.width, info.height, faceCount, info.format.bpp, data.get()))
				return false;
		}
		else
		{
			if (!image.create(format, info.width, info.height, info.depth * faceCount, 1, info10.arraySize))
				return false;

			if (!stream.read((char*)image.data(), image.size()))
				return false;

			switch (format)
			{
			case Format::B8G8R8SRGB:
			case Format::B8G8R8UNorm:
			case Format::B8G8R8SNorm:
			{
				auto data = (char*)image.data();

				for (std::uint32_t y = 0; y < info.height / 2; y++)
				{
					for (std::uint32_t x = 0; x < info.width; x++)
					{
						auto src = (y * info.width + x) * 3;
						auto dst = ((info.height - y - 1) * info.width + x) * 3;

						std::swap(data[src], data[dst]);
						std::swap(data[src + 1], data[dst + 1]);
						std::swap(data[src + 2], data[dst + 2]);
					}
				}
			}
			break;
			case Format::B8G8R8A8SRGB:
			case Format::B8G8R8A8SNorm:
			case Format::B8G8R8A8UNorm:
			{
				auto data = (char*)image.data();

				for (std::uint32_t y = 0; y < info.height / 2; y++)
				{
					for (std::uint32_t x = 0; x < info.width; x++)
					{
						auto src = (y * info.width + x) * 4;
						auto dst = ((info.height - y - 1) * info.width + x) * 4;

						std::swap(data[src], data[dst]);
						std::swap(data[src + 1], data[dst + 1]);
						std::swap(data[src + 2], data[dst + 2]);
						std::swap(data[src + 3], data[dst + 3]);
					}
				}
			}
			break;
			default:
				break;
			}
		}

		return true;
	}

	bool
	DDSHandler::doSave(ostream& stream, const Texture& image) noexcept
	{
		DDS_HEADER hdr;
		std::memset((char*)&hdr, 0, sizeof(hdr));

		hdr.header[0] = 'D';
		hdr.header[1] = 'D';
		hdr.header[2] = 'S';
		hdr.header[3] = 0x20;
		hdr.size = sizeof(hdr) - sizeof(hdr.header);
		hdr.flags = 0x100f;
		hdr.width = image.width();
		hdr.height = image.height();
		hdr.mip_level = image.getMipLevel();
		hdr.pitch = 0x3200;

		hdr.format.size = sizeof(DDPixelFormat);
		hdr.format.flags = DDPF::DDPF_RGBAPIXELS;
		hdr.format.fourcc = D3DFORMAT::D3DFMT_A8B8G8R8;
		hdr.format.bpp = 0x20;
		hdr.format.mask[0] = 0x00ff0000;
		hdr.format.mask[1] = 0x0000ff00;
		hdr.format.mask[2] = 0x000000ff;
		hdr.format.mask[3] = 0xff000000;
		hdr.caps.surface = DDSCAPS::DDSCAPS_TEXTURE | DDSCAPS::DDSCAPS_COMPLEX;

		stream.write((char*)&hdr, sizeof(hdr));
		stream.write((char*)image.data(), image.size());

		return false;
	}
}