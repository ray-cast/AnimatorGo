#version 430

// Note Anvil define system assumes first line is alway a #version so don't rearrange

//
// Copyright (c) 2016 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

layout( local_size_x = 64, local_size_y = 1, local_size_z = 1 ) in;

struct bbox
{
    vec4 pmin;
    vec4 pmax;
};

#define BvhNode bbox

struct ray
{
    vec4 o;
    vec4 d;
    ivec2 extra;
    ivec2 padding;
};

struct ShapeData
{
    int id;
    int bvhidx;
    int mask;
    int padding1;
    vec4 m0;
    vec4 m1;
    vec4 m2;
    vec4 m3;
    vec4  linearvelocity;
    vec4  angularvelocity;
};

struct Face
{
    // Vertex indices
    int idx0;
    int idx1;
    int idx2;
    int shapeidx;
    // Primitive ID
    int id;
    // Idx count
    int cnt;

    ivec2 padding;
};

struct Intersection
{
    int shapeid;
    int primid;
    ivec2 padding;

    vec4 uvwt;
};

layout( std140, binding = 0 ) buffer restrict readonly NodesBlock
{
    bbox Nodes[];
};

layout( std140, binding = 1 ) buffer restrict readonly VerticesBlock
{
    vec4 Vertices[];
};

layout( std140, binding = 2 ) buffer restrict readonly FacesBlock
{
    Face Faces[];
};

layout( std140, binding = 3 ) buffer restrict readonly ShapesBlock
{
    ShapeData Shapes[];
};

layout( std140, binding = 4 ) buffer restrict readonly RaysBlock
{
    ray Rays[];
};

layout( std140, binding = 5 ) buffer restrict readonly OffsetBlock
{
    int Offset;
};

layout( std140, binding = 6 ) buffer restrict readonly NumraysBlock
{
    int Numrays;
};

layout( std430, binding = 7 ) buffer restrict writeonly HitsBlock
{
    Intersection Hits[];
};

layout( std430, binding = 7 ) buffer restrict writeonly HitsResults
{
    int Hitresults[];
};

bool Ray_IsActive( in ray r )
{
    return 0 != r.extra.y ;
}

int Ray_GetMask( in ray r )
{
    return r.extra.x;
}

bool IntersectSceneAny( in ray r );
void IntersectSceneClosest( in ray r, inout Intersection isect);

void IntersectAny()
{
    uint globalID = gl_GlobalInvocationID.x;

    // Handle only working subset
    if (globalID < Numrays)
    {
        // Fetch ray
        ray r = Rays[Offset + globalID];

        if (Ray_IsActive(r))
        {
            // Calculate any intersection
            Hitresults[Offset + globalID] = IntersectSceneAny( r ) ? 1 : -1;
        }
    }
}

void IntersectAnyRC()
{
    IntersectAny();
}

void IntersectClosest()
{
    uint globalID = gl_GlobalInvocationID.x;

    // Handle only working subset
    if (globalID < Numrays)
    {
        // Fetch ray
        int idx = Offset + int(globalID);
        ray r = Rays[idx];

        if (Ray_IsActive( r ))
        {
            // Calculate closest hit
            Intersection isect;

            IntersectSceneClosest( r, isect);

            // Write data back in case of a hit
            Hits[idx] = isect;
        }
    }
}

void IntersectClosestRC()
{
    IntersectClosest();
}


#define STARTIDX(x)     ((int(x.pmin.w)))
#define LEAFNODE(x)     (((x).pmin.w) != -1.f)

bool IntersectBox(in ray r, in vec3 invdir, in bbox box, in float maxt)
{
    const vec3 f = (box.pmax.xyz - r.o.xyz) * invdir;
    const vec3 n = (box.pmin.xyz - r.o.xyz) * invdir;
          
    const vec3 tmax = max(f, n);
    const vec3 tmin = min(f, n);

    const float t1 = min(min(tmax.x, min(tmax.y, tmax.z)), maxt);
    const float t0 = max(max(tmin.x, max(tmin.y, tmin.z)), 0.f);

    return (t1 >= t0) ? true : false;
}

bool IntersectTriangle( in ray r, in vec3 v1, in vec3 v2, in vec3 v3, inout Intersection isect)
{
    const vec3 e1 = v2 - v1;
    const vec3 e2 = v3 - v1;
    const vec3 s1 = cross(r.d.xyz, e2);
    const float  invd = 1.0f/(dot(s1, e1));
    const vec3 d = r.o.xyz - v1;
    const float  b1 = dot(d, s1) * invd;
    const vec3 s2 = cross(d, e1);
    const float  b2 = dot(r.d.xyz, s2) * invd;
    const float temp = dot(e2, s2) * invd;
    
    if (b1 < 0.f || b1 > 1.f || b2 < 0.f || b1 + b2 > 1.f || temp < 0.f || temp > isect.uvwt.w)
    {
        return false;
    }
    else
    {
        isect.uvwt = vec4(b1, b2, 0.f, temp);
        return true;
    }
}

bool IntersectTriangleP( in ray r, in vec3 v1, in vec3 v2, in vec3 v3 )
{
    const vec3 e1 = v2 - v1;
    const vec3 e2 = v3 - v1;
    const vec3 s1 = cross(r.d.xyz, e2);
    const float  invd = 1.0f/(dot(s1, e1));
    const vec3 d = r.o.xyz - v1;
    const float  b1 = dot(d, s1) * invd;
    const vec3 s2 = cross(d, e1);
    const float  b2 = dot(r.d.xyz, s2) * invd;
    const float temp = dot(e2, s2) * invd;

    if ( b1 < 0.f || b1 > 1.f || b2 < 0.f || b1 + b2 > 1.f || temp < 0.f || temp > r.o.w )
    {
        return false;
    }

    else
    {
        return true;
    }
}

void IntersectLeafClosest( in BvhNode node, in ray r, inout Intersection isect )
{
    vec3 v1, v2, v3;
    Face face;

    int start = STARTIDX(node);
    face = Faces[start];
    v1 = Vertices[face.idx0].xyz;
    v2 = Vertices[face.idx1].xyz;
    v3 = Vertices[face.idx2].xyz;

    int shapemask = Shapes[face.shapeidx].mask;

    if ( ( Ray_GetMask(r) & shapemask ) != 0 )
    {
        if (IntersectTriangle(r, v1, v2, v3, isect))
        {
                    isect.primid = face.id;
                    isect.shapeid = Shapes[face.shapeidx].id;
        }
    }
}

bool IntersectLeafAny( in BvhNode node, in ray r )
{
    vec3 v1, v2, v3;
    Face face;

    int start = STARTIDX(node);
    face = Faces[start];
    v1 = Vertices[face.idx0].xyz;
    v2 = Vertices[face.idx1].xyz;
    v3 = Vertices[face.idx2].xyz;

    int shapemask = Shapes[face.shapeidx].mask;

    if ( (Ray_GetMask(r) & shapemask) != 0 )
    {
        if (IntersectTriangleP(r, v1, v2, v3))
        {
            return true;
        }
    }

    return false;
}

// intersect Ray against the whole BVH structure
bool IntersectSceneAny( in ray r )
{
    vec3 invdir  = vec3(1.f, 1.f, 1.f)/r.d.xyz;

    int idx = 0;
    while (idx != -1)
    {
        // Try intersecting against current node's bounding box.
        // If this is the leaf try to intersect against contained triangle.
        BvhNode node = Nodes[idx];
        if (IntersectBox(r, invdir, node, r.o.w))
        {
            if (LEAFNODE(node))
            {
                if (IntersectLeafAny( node, r ) )
                {
                    return true;
                }
                else
                {
                    idx = int(node.pmax.w);
                }
            }
            // Traverse child nodes otherwise.
            else
            {
                ++idx;
            }
        }
        else
        {
            idx = int(node.pmax.w);
        }
    };

    return false;
}

void IntersectSceneClosest( in ray r, inout Intersection isect)
{
    const vec3 invdir  = vec3(1.f, 1.f, 1.f)/r.d.xyz;

    isect.uvwt = vec4(0.f, 0.f, 0.f, r.o.w);
    isect.shapeid = -1;
    isect.primid = -1;

    int idx = 0;

    isect.padding.x = 667;
    isect.padding.y = r.padding.x;

    while (idx != -1)
    {
        // Try intersecting against current node's bounding box.
        // If this is the leaf try to intersect against contained triangle.
        BvhNode node = Nodes[idx];
        if (IntersectBox(r, invdir, node, isect.uvwt.w))
        {
            if (LEAFNODE(node))
            {
                IntersectLeafClosest( node, r, isect );
                idx = int(node.pmax.w);
            }
            // Traverse child nodes otherwise.
            else
            {
                ++idx;
            }
        }
        else
        {
            idx = int(node.pmax.w);
        }
    };
}
