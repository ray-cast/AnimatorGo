#version 430

// Note Anvil define system assumes first line is alway a #version so don't rearrange

//
// Copyright (c) 2016 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

layout( local_size_x = 64, local_size_y = 1, local_size_z = 1 ) in;

struct bbox
{
    vec3 pmin;
    vec3 pmax;
};

struct HlbvhNode
{
    uint parent;
    uint left;
    uint right;
    uint next;
};

layout( std140, binding = 0 ) buffer restrict MortoncodesBlock
{
    uint Mortoncodes[];
};

layout( std140, binding = 1 ) buffer restrict BoundsBlock
{
    bbox Bounds[];
};

layout( std140, binding = 2 ) buffer restrict readonly NumBlock
{
    uint Num;
};

layout( std140, binding = 3) buffer restrict readonly IndicesBlock
{
    uint Indices[];
};

layout( std430, binding = 4 ) buffer NodesBlock
{
    HlbvhNode Nodes[];
};

layout( std430, binding = 5 ) buffer FlagsBlock
{
    uint Flags[];
};

layout( std430, binding = 6) buffer BoundssortedBlock
{
    bbox Boundssorted[];
};

uvec2 FindSpan(uint idx);
uint FindSplit(uvec2 span);

// The following two functions are from
// http://devblogs.nvidia.com/parallelforall/thinking-parallel-part-iii-tree-construction-gpu/
// Expands a 10-bit integer into 30 bits
// by inserting 2 zeros after each bit.
uint ExpandBits( in uint v)
{
    v = (v * 0x00010001u) & 0xFF0000FFu;
    v = (v * 0x00000101u) & 0x0F00F00Fu;
    v = (v * 0x00000011u) & 0xC30C30C3u;
    v = (v * 0x00000005u) & 0x49249249u;
    return v;
}

// Calculates a 30-bit Morton code for the
// given 3D point located within the unit cube [0,1].
uint CalculateMortonCode( in vec3 p)
{
    float x = min(max(p.x * 1024.0f, 0.0f), 1023.0f);
    float y = min(max(p.y * 1024.0f, 0.0f), 1023.0f);
    float z = min(max(p.z * 1024.0f, 0.0f), 1023.0f);
    uint xx = ExpandBits(uint(x));
    uint yy = ExpandBits(uint(y));
    uint zz = ExpandBits(uint(z));
    return xx * 4 + yy * 2 + zz;
}

void CalcMortonCode()
{
    uint globalID = gl_GlobalInvocationID.x;

    if (globalID < Num)
    {
        bbox bound = Bounds[globalID];
        vec3 center = 0.5f * (bound.pmax + bound.pmin);
        Mortoncodes[globalID] = CalculateMortonCode(center);
    }
}

#define LEAFIDX(i) ((Num-1) + i)
#define NODEIDX(i) (i)

void BuildHierarchy()
{
    uint globalID = gl_GlobalInvocationID.x;

    // Set child
    if (globalID < Num)
    {
        Nodes[LEAFIDX(globalID)].left = Nodes[LEAFIDX(globalID)].right = Indices[globalID];
        Boundssorted[LEAFIDX(globalID)] = Bounds[Indices[globalID]];
    }
    
    // Set internal nodes
    if (globalID < Num - 1)
    {
        // Find span occupied by the current node
        uvec2 range = FindSpan(globalID);

        // Find split position inside the range
        uint  split = FindSplit(range);

        // Create child nodes if needed
        uint c1idx = (split == range.x) ? LEAFIDX(split) : NODEIDX(split);
        uint c2idx = (split + 1 == range.y) ? LEAFIDX(split + 1) : NODEIDX(split + 1);

        Nodes[NODEIDX(globalID)].left = c1idx;
        Nodes[NODEIDX(globalID)].right = c2idx;
        Nodes[NODEIDX(globalID)].next = (range.y + 1 < Num) ? range.y + 1 : -1;
        Nodes[c1idx].parent = NODEIDX(globalID);
        Nodes[c1idx].next = c2idx;
        Nodes[c2idx].parent = NODEIDX(globalID);
        Nodes[c2idx].next = Nodes[NODEIDX(globalID)].next;
    }
}

bbox bboxunion(bbox b1, bbox b2)
{
    bbox res;
    res.pmin = min(b1.pmin, b2.pmin);
    res.pmax = max(b1.pmax, b2.pmax);
    return res;
}

// Propagate bounds up to the root
void RefitBounds()
{
    uint globalID = gl_GlobalInvocationID.x;

    // Start from leaf nodes
    if (globalID < Num)
    {
        // Get my leaf index
        uint idx = LEAFIDX(globalID);

        do
        {
            // Move to parent node
            idx = Nodes[idx].parent;

            // Check node's flag
            if (atomicCompSwap(Flags[ idx ], 0, 1) == 1)
            {
                // If the flag was 1 the second child is ready and 
                // this thread calculates bbox for the node

                // Fetch kids
                uint lc = Nodes[idx].left;
                uint rc = Nodes[idx].right;

                // Calculate bounds
                bbox b = bboxunion(Bounds[lc], Bounds[rc]);

                // Write bounds
                Bounds[idx] = b;
            }
            else
            {
                // If the flag was 0 set it to 1 and bail out.
                // The thread handling the second child will
                // handle this node.
                break;
            }
        }
        while (idx != 0);
    }
}

// Calculates longest common prefix length of bit representations
// if  representations are equal we consider sucessive indices
int delta( in uint i1, in uint i2)
{
    // Select left end
    uint left = min(i1, i2);
    // Select right end
    uint right = max(i1, i2);
    // This is to ensure the node breaks if the index is out of bounds
    if (left < 0 || right >= Num) 
    {
        return -1;
    }
    // Fetch Morton codes for both ends
    uint leftcode = Mortoncodes[left];
    uint rightcode = Mortoncodes[right];

    // Special handling of duplicated codes: use their indices as a fallback
    return leftcode != rightcode ? findMSB(leftcode ^ rightcode) : (32 + findMSB(left ^ right));
}

// Find span occupied by internal node with index idx
uvec2 FindSpan(uint idx)
{
    // Find the direction of the range
    int d = sign( delta(idx, idx+1) - delta(idx, idx-1) );

    // Find minimum number of bits for the break on the other side
    int deltamin = delta(idx, idx-d);

    // Search conservative far end
    uint lmax = 2;
    while (delta(idx,idx + lmax * d) > deltamin)
        lmax *= 2;

    // Search back to find exact bound
    // with binary search
    uint l = 0;
    uint t = lmax;
    do
    {
        t /= 2;
        if(delta(idx, idx + (l + t)*d) > deltamin)
        {
            l = l + t;
        }
    }
    while (t > 1);

    // Pack span 
    uvec2 span;
    span.x = min(idx, idx + l*d);
    span.y = max(idx, idx + l*d);
    return span;
}


// Find split idx within the span
uint FindSplit(uvec2 span)
{
    // Fetch codes for both ends
    uint left = span.x;
    uint right = span.y;

    // Calculate the number of identical bits from higher end
    uint numidentical = delta(left, right);

    do
    {
        // Proposed split
        uint newsplit = (right + left) / 2;

        // If it has more equal leading bits than left and right accept it
        if (delta(left, newsplit) > numidentical)
        {
            left = newsplit;
        }
        else
        {
            right = newsplit;
        }
    }
    while (right > left + 1);

    return left;
}
/*
// Set parent-child relationship
__kernel void BuildHierarchy(
    // Sorted Morton codes of the primitives
    __global int* mortoncodes,
    // Bounds
    __global bbox* bounds,
    // Primitive indices
    __global int* indices,
    // Number of primitives
    int numprims,
    // Nodes
    __global HlbvhNode* nodes,
    // Leaf bounds
    __global bbox* boundssorted
    )
{
    int globalid = get_global_id(0);

    // Set child
    if (globalid < numprims)
    {
        nodes[LEAFIDX(globalid)].left = nodes[LEAFIDX(globalid)].right = indices[globalid];
        boundssorted[LEAFIDX(globalid)] = bounds[indices[globalid]];
    }
    
    // Set internal nodes
    if (globalid < numprims - 1)
    {
        // Find span occupied by the current node
        int2 range = FindSpan(mortoncodes, numprims, globalid);

        // Find split position inside the range
        int  split = FindSplit(mortoncodes, numprims, range);

        // Create child nodes if needed
        int c1idx = (split == range.x) ? LEAFIDX(split) : NODEIDX(split);
        int c2idx = (split + 1 == range.y) ? LEAFIDX(split + 1) : NODEIDX(split + 1);

        nodes[NODEIDX(globalid)].left = c1idx;
        nodes[NODEIDX(globalid)].right = c2idx;
        //nodes[NODEIDX(globalid)].next = (range.y + 1 < numprims) ? range.y + 1 : -1;
        nodes[c1idx].parent = NODEIDX(globalid);
        //nodes[c1idx].next = c2idx;
        nodes[c2idx].parent = NODEIDX(globalid);
        //nodes[c2idx].next = nodes[NODEIDX(globalid)].next;
    }
}

// Propagate bounds up to the root
__kernel void RefitBounds(__global bbox* bounds,
                          int numprims,
                          __global HlbvhNode* nodes,
                          __global int* flags
                          )
{
    int globalid = get_global_id(0);

    // Start from leaf nodes
    if (globalid < numprims)
    {
        // Get my leaf index
        int idx = LEAFIDX(globalid);

        do
        {
            // Move to parent node
            idx = nodes[idx].parent;

            // Check node's flag
            if (atomic_cmpxchg(flags + idx, 0, 1) == 1)
            {
                // If the flag was 1 the second child is ready and 
                // this thread calculates bbox for the node

                // Fetch kids
                int lc = nodes[idx].left;
                int rc = nodes[idx].right;

                // Calculate bounds
                bbox b = bboxunion(bounds[lc], bounds[rc]);

                // Write bounds
                bounds[idx] = b;
            }
            else
            {
                // If the flag was 0 set it to 1 and bail out.
                // The thread handling the second child will
                // handle this node.
                break;
            }
        }
        while (idx != 0);
    }
}

*/