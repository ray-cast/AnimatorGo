SET(LIB_NAME octoon-core)

# runtime libraries
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/math/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/runtime/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/texture/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/mesh/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/material/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/camera/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/light/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/geometry/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/lightmap/CMakeLists.txt)

IF(OCTOON_FEATURE_IO_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/io/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_INPUT_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/input/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_MODEL_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/model/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_HAL_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/hal/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_VIDEO_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/video/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_UI_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/ui/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_AUDIO_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/audio/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_PHYSICS_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/physics/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_ANIMATION_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/animation/CMakeLists.txt)
ENDIF()

IF(OCTOON_BUILD_SHARED_DLL)
	ADD_LIBRARY(${LIB_NAME} SHARED
		${RUNTIME_LIST}
		${MATH_LIST}
		${IO_LIST}
		${TEXTURE_LIST}
		${INPUT_LIST}
		${ANIMATION_LIST}
		${MODEL_LIST}
		${MESH_LIST}
		${LIGHTMAP_LIST}
		${CAMERA_LIST}
		${MATERIAL_LIST}
		${AUDIO_LIST}
		${PHYSICS_LIST}
		${RENDERER_LIST}
		${UI_LIST}
		${LIGHT_LIST}
		${GEOMETRY_LIST}
		${VIDEO_LIST}
	)
ELSE()
	ADD_LIBRARY(${LIB_NAME}
		${RUNTIME_LIST}
		${MATH_LIST}
		${IO_LIST}
		${TEXTURE_LIST}
		${INPUT_LIST}
		${ANIMATION_LIST}
		${MODEL_LIST}
		${MESH_LIST}
		${LIGHTMAP_LIST}
		${CAMERA_LIST}
		${MATERIAL_LIST}
		${AUDIO_LIST}
		${PHYSICS_LIST}
		${RENDERER_LIST}
		${UI_LIST}
		${LIGHT_LIST}
		${GEOMETRY_LIST}
		${VIDEO_LIST}
	)
ENDIF()

TARGET_COMPILE_DEFINITIONS(${LIB_NAME} PRIVATE CL_TARGET_OPENCL_VERSION=220)
IF(OCTOON_BUILD_SHARED_DLL)
	TARGET_COMPILE_DEFINITIONS(${LIB_NAME} PRIVATE OCTOON_BUILD_DLL_EXPORT)
ELSE()
	TARGET_COMPILE_DEFINITIONS(${LIB_NAME} PRIVATE OCTOON_STATIC)
ENDIF()

TARGET_LINK_LIBRARIES(${LIB_NAME} general zipper)
TARGET_LINK_LIBRARIES(${LIB_NAME} general RadeonRays)

TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE ${OCTOON_PATH_INCLUDE})
TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE ${OCTOON_PATH_DEPENDENCIES}/minimp3)

CONAN_TARGET_LINK_LIBRARIES(${LIB_NAME})

IF(OCTOON_BUILD_PLATFORM_ANDROID)
    TARGET_LINK_LIBRARIES(${LIB_NAME} general m)
ENDIF()

IF(OCTOON_BUILD_PLATFORM_APPLE)
    FIND_LIBRARY(OPENGL_FRAMEWORK OpenGL)
    TARGET_LINK_LIBRARIES(${LIB_NAME} general ${OPENGL_FRAMEWORK})
ELSEIF(OCTOON_BUILD_PLATFORM_WINDOWS)
    TARGET_LINK_LIBRARIES(${LIB_NAME} general glu32)
ELSEIF(OCTOON_BUILD_PLATFORM_LINUX)
	FIND_PACKAGE(OpenGL REQUIRED)
	TARGET_LINK_LIBRARIES(${LIB_NAME} general ${OPENGL_LIBRARIES})
ELSEIF(OCTOON_BUILD_PLATFORM_EMSCRIPTEN)
	TARGET_LINK_LIBRARIES(${LIB_NAME} general iGLU)
ENDIF()

IF(OCTOON_FEATURE_INPUT_API_GLFW)
	TARGET_LINK_LIBRARIES(${LIB_NAME} general glfw)
ELSEIF(OCTOON_FEATURE_INPUT_API_WINDOWS)
	TARGET_LINK_LIBRARIES(${LIB_NAME} general winmm)
	TARGET_LINK_LIBRARIES(${LIB_NAME} general imm32)
ENDIF()

IF(OCTOON_FEATURE_UI_ENABLE)
	TARGET_LINK_LIBRARIES(${LIB_NAME} general imgui)
ENDIF()

IF(OCTOON_FEATURE_AUDIO_ENABLE)
	FIND_PACKAGE(OpenAL REQUIRED)
	TARGET_LINK_LIBRARIES(${LIB_NAME} general OpenAL::OpenAL)
ENDIF()

IF(OCTOON_FEATURE_PHYSICS_ENABLE)
	FIND_PACKAGE(Bullet REQUIRED)
	FIND_PACKAGE(PhysX REQUIRED)
	FIND_PACKAGE(nvcloth REQUIRED)

	INCLUDE_DIRECTORIES(${PhysX_INCLUDE_DIRS})
	INCLUDE_DIRECTORIES(${Bullet_INCLUDE_DIRS})
	INCLUDE_DIRECTORIES(${nvcloth_INCLUDE_DIRS})
	TARGET_LINK_LIBRARIES(${LIB_NAME} general ${nvcloth_LIBRARIES})
	TARGET_LINK_LIBRARIES(${LIB_NAME} general ${Bullet_LIBRARIES})
	TARGET_LINK_LIBRARIES(${LIB_NAME} general ${PhysX_LIBRARIES})
ENDIF()

IF(OCTOON_FEATURE_HAL_ENABLE)
	TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/hal/OpenGL 20")
	TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/hal/OpenGL 30")
	TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/hal/OpenGL 32")
	TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/hal/OpenGL 33")
	TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/hal/OpenGL 45")
	TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/hal/OpenGL Common")

	IF(OCTOON_BUILD_PLATFORM_EMSCRIPTEN AND NOT OCTOON_BUILD_PLATFORM_ANDROID)
		TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE ${OCTOON_PATH_DEPENDENCIES}/gles/include)
		TARGET_LINK_DIRECTORIES(${LIB_NAME} PRIVATE ${OCTOON_PATH_DEPENDENCIES}/gles/lib/Mali/x64)
		TARGET_COPY_TO_OUTPUT_DIR(TARGET ${LIB_NAME} FILES
				${OCTOON_PATH_DEPENDENCIES}/gles/lib/Mali/x64/libEGL.dll
				${OCTOON_PATH_DEPENDENCIES}/gles/lib/Mali/x64/libGLESv2.dll
				${OCTOON_PATH_DEPENDENCIES}/gles/lib/Mali/x64/libMaliEmulator.dll
				${OCTOON_PATH_DEPENDENCIES}/gles/lib/Mali/x64/log4cplus.dll
			)
	ENDIF()

	IF(OCTOON_BUILD_PLATFORM_EMSCRIPTEN)
		TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE ${OCTOON_PATH_DEPENDENCIES}/X11)
	ENDIF()

	IF(OCTOON_BUILD_PLATFORM_APPLE)
		FIND_LIBRARY(COCOA_FRAMEWORK Cocoa)
		FIND_LIBRARY(OPENGL_FRAMEWORK OpenGL)
		TARGET_LINK_LIBRARIES(${LIB_NAME} general ${COCOA_FRAMEWORK})
		TARGET_LINK_LIBRARIES(${LIB_NAME} general ${OPENGL_FRAMEWORK})
	ELSEIF(OCTOON_BUILD_PLATFORM_LINUX)
		FIND_PACKAGE(OpenGL REQUIRED)
		TARGET_LINK_LIBRARIES(${LIB_NAME} general X11)
		TARGET_LINK_LIBRARIES(${LIB_NAME} general ${OPENGL_LIBRARIES})
	ELSEIF(OCTOON_BUILD_PLATFORM_ANDROID)
	    TARGET_LINK_LIBRARIES(${LIB_NAME} general libEGL)
	    TARGET_LINK_LIBRARIES(${LIB_NAME} general libGLESv2)
	ELSEIF(OCTOON_BUILD_PLATFORM_EMSCRIPTEN)
		TARGET_LINK_LIBRARIES(${LIB_NAME} general EGL)
		TARGET_LINK_LIBRARIES(${LIB_NAME} general GLESv2)
	ENDIF()

	IF(NOT OCTOON_BUILD_PLATFORM_EMSCRIPTEN AND NOT OCTOON_BUILD_PLATFORM_ANDROID)
		FIND_PACKAGE(GLEW REQUIRED)
		TARGET_LINK_LIBRARIES(${LIB_NAME} general GLEW::GLEW)
	ENDIF()

	IF(OCTOON_FEATURE_HAL_USE_HLSL)
		#TARGET_LINK_LIBRARIES(${LIB_NAME} general hlslcc)
		TARGET_LINK_LIBRARIES(${LIB_NAME} general libHLSLcc)
		TARGET_LINK_LIBRARIES(${LIB_NAME} general d3dcompiler)
		TARGET_COPY_TO_OUTPUT_DIR(TARGET ${LIB_NAME} FILES "${OCTOON_PATH_DEPENDENCIES}/DirectX/Dlls/D3DCompiler_47.dll")
	ENDIF()
ENDIF()

SET_TARGET_ATTRIBUTE(${LIB_NAME} "octoon")